/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * OAuth2 Auth Callback
     * @description This route is used for OAuth authentication methods to verify and login/create an account.
     */
    post: operations["post-v1-auth-callback"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Current User
     * @description Get the currently authenticated user's information.
     */
    get: operations["get-auth-me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/event/{eventId}/interest": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Make an interest submission for an event (email list) */
    post: operations["post-event-interest"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * ErrorResponse
     * @description This model is returned on server errors, it returns an error code (lookup code definitions in documentation), an error key, and a message.
     */
    ErrorResponse: {
      error: string;
      message: string;
    };
    /**
     * UserContext
     * @description This is the model used when returning from GetMe. Used often in middleware!
     */
    UserContext: {
      /** Format: uuid */
      userId: string;
      name: string;
      onboarded: boolean;
      /** Format: uri */
      image?: string | null;
      role: components["schemas"]["PlatformRole"];
    };
    /**
     * PlatformRole
     * @description A user's role on the platform. Either base permissions or elevated superuser perms.
     * @enum {string}
     */
    PlatformRole: "user" | "superuser";
    /** Session */
    Session: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_id: string;
      /** Format: date-time */
      expires_at: string;
      ip_address?: string | null;
      user_agent?: string | null;
    };
  };
  responses: {
    /** @description Unauthenticated: Requester is not currently authenticated. */
    Unauthenticated: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized: User does not have access to this resource. */
    Unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    "Bad-Request": {
      headers: {
        [name: string]: unknown;
      };
      content?: never;
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "post-v1-auth-callback": {
    parameters: {
      query: {
        /** @description The OAuth code passed back from the provider. Part of the PKCE flow. */
        code: string;
        /** @description The state containing a base64 encoded version of the nonce, provider, and redirect url. */
        state: string;
      };
      header?: never;
      path?: never;
      cookie: {
        /** @description The nonce for comparing against the callback state decoded to prevent CSRF attacks. */
        sh_auth_nonce: string;
      };
    };
    requestBody?: never;
    responses: {
      /** @description OK: User is logged in successfully. For when the redirect field is empty. */
      200: {
        headers: {
          /** @description Sets a sh_session cookie to signify auth status */
          "Set-Cookie"?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Found: Logged in and redirected to a requested location */
      302: {
        headers: {
          /** @description Sets a sh_session cookie to signify auth status */
          "Set-Cookie"?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request: Something went wrong with the request queries or their properties */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Forbidden: Something went wrong verifying identity or authenticating. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Bad Gateway: Authenticating OAuth server did not respond or user does not exist  */
      502: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-auth-me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        /** @description The authenticated session token/id */
        sh_session?: string;
      };
    };
    requestBody?: never;
    responses: {
      /** @description OK: Current user data returned */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserContext"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      /** @description Server Error: Something went terribly wrong on our end. */
      "5XX": {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-event-interest": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        eventId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: email
           * @example johndoe@ufl.edu
           */
          email: string;
          /** @example SHX Frontpage */
          source?: string;
        };
      };
    };
    responses: {
      /** @description OK: Interest email created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request/Malformed request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Duplicate email found in DB */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Server Error: Something went terribly wrong on our end. */
      "5XX": {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
