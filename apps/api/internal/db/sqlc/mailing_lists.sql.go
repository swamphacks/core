// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mailing_lists.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addEmail = `-- name: AddEmail :one
INSERT INTO emails (event_id, user_id, email)
VALUES ($1, $2, $3)
RETURNING id, event_id, user_id, email, created_at, updated_at
`

type AddEmailParams struct {
	EventID pgtype.UUID `json:"event_id"`
	UserID  pgtype.UUID `json:"user_id"`
	Email   string      `json:"email"`
}

func (q *Queries) AddEmail(ctx context.Context, arg AddEmailParams) (Email, error) {
	row := q.db.QueryRow(ctx, addEmail, arg.EventID, arg.UserID, arg.Email)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmailByID = `-- name: DeleteEmailByID :exec
DELETE FROM emails
WHERE id = $1
`

func (q *Queries) DeleteEmailByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmailByID, id)
	return err
}

const getEmailByID = `-- name: GetEmailByID :one
SELECT id, event_id, user_id, email, created_at, updated_at FROM emails
WHERE id = $1
`

func (q *Queries) GetEmailByID(ctx context.Context, id uuid.UUID) (Email, error) {
	row := q.db.QueryRow(ctx, getEmailByID, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmailsByEvent = `-- name: GetEmailsByEvent :many
SELECT id, event_id, user_id, email, created_at, updated_at FROM emails
WHERE event_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEmailsByEvent(ctx context.Context, eventID pgtype.UUID) ([]Email, error) {
	rows, err := q.db.Query(ctx, getEmailsByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Email{}
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.UserID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmailsByUser = `-- name: GetEmailsByUser :many
SELECT id, event_id, user_id, email, created_at, updated_at FROM emails
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEmailsByUser(ctx context.Context, userID pgtype.UUID) ([]Email, error) {
	rows, err := q.db.Query(ctx, getEmailsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Email{}
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.UserID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailAddress = `-- name: UpdateEmailAddress :one
UPDATE emails
SET email = $2, updated_at = now()
WHERE id = $1
RETURNING id, event_id, user_id, email, created_at, updated_at
`

type UpdateEmailAddressParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateEmailAddress(ctx context.Context, arg UpdateEmailAddressParams) (Email, error) {
	row := q.db.QueryRow(ctx, updateEmailAddress, arg.ID, arg.Email)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
