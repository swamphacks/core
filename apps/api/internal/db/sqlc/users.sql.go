// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO auth.users (name, email, image)
VALUES ($1, $2, $3)
RETURNING id, name, email, email_verified, onboarded, image, created_at, updated_at, role, preferred_email, email_consent
`

type CreateUserParams struct {
	Name  string  `json:"name"`
	Email *string `json:"email"`
	Image *string `json:"image"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AuthUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Image)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Onboarded,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.PreferredEmail,
		&i.EmailConsent,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM auth.users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, email_verified, onboarded, image, created_at, updated_at, role, preferred_email, email_consent FROM auth.users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email *string) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Onboarded,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.PreferredEmail,
		&i.EmailConsent,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, email_verified, onboarded, image, created_at, updated_at, role, preferred_email, email_consent FROM auth.users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Onboarded,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.PreferredEmail,
		&i.EmailConsent,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE auth.users
SET
    name = CASE WHEN $1::boolean THEN $2 ELSE name END,
    email = CASE WHEN $3::boolean THEN $4 ELSE email END,
    email_verified = CASE WHEN $5::boolean THEN $6 ELSE email_verified END,
    preferred_email = CASE WHEN $7::boolean THEN $8 ELSE preferred_email END,
    onboarded = CASE WHEN $9::boolean THEN $10 ELSE onboarded END,
    image = CASE WHEN $11::boolean THEN $12 ELSE image END,
    email_consent = CASE WHEN $13::boolean THEN $14 ELSE email_consent END,
    updated_at = NOW()
WHERE
    id = $15::uuid
`

type UpdateUserParams struct {
	NameDoUpdate           bool      `json:"name_do_update"`
	Name                   string    `json:"name"`
	EmailDoUpdate          bool      `json:"email_do_update"`
	Email                  *string   `json:"email"`
	EmailVerifiedDoUpdate  bool      `json:"email_verified_do_update"`
	EmailVerified          bool      `json:"email_verified"`
	PreferredEmailDoUpdate bool      `json:"preferred_email_do_update"`
	PreferredEmail         *string   `json:"preferred_email"`
	OnboardedDoUpdate      bool      `json:"onboarded_do_update"`
	Onboarded              bool      `json:"onboarded"`
	ImageDoUpdate          bool      `json:"image_do_update"`
	Image                  *string   `json:"image"`
	EmailConsentDoUpdate   bool      `json:"email_consent_do_update"`
	EmailConsent           bool      `json:"email_consent"`
	ID                     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.NameDoUpdate,
		arg.Name,
		arg.EmailDoUpdate,
		arg.Email,
		arg.EmailVerifiedDoUpdate,
		arg.EmailVerified,
		arg.PreferredEmailDoUpdate,
		arg.PreferredEmail,
		arg.OnboardedDoUpdate,
		arg.Onboarded,
		arg.ImageDoUpdate,
		arg.Image,
		arg.EmailConsentDoUpdate,
		arg.EmailConsent,
		arg.ID,
	)
	return err
}

const updateUserOnboarded = `-- name: UpdateUserOnboarded :exec
UPDATE auth.users
SET onboarded = TRUE
WHERE id = $1
`

func (q *Queries) UpdateUserOnboarded(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateUserOnboarded, id)
	return err
}
