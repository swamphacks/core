// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	// Adds a new email to the mailing list for a specific user and event.
	// The unique constraint on (event_id, user_id) will prevent duplicates.
	// Returns the newly created email record.
	AddEmail(ctx context.Context, arg AddEmailParams) (EventInterestSubmission, error)
	AssignRole(ctx context.Context, arg AssignRoleParams) error
	CreateAccount(ctx context.Context, arg CreateAccountParams) (AuthAccount, error)
	CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error)
	CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error)
	CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (AuthSession, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (AuthUser, error)
	DeleteAccount(ctx context.Context, arg DeleteAccountParams) error
	DeleteApplication(ctx context.Context, arg DeleteApplicationParams) error
	DeleteCampaignById(ctx context.Context, id uuid.UUID) (int64, error)
	// execrows returns affect row count on top of an error
	DeleteEventById(ctx context.Context, id uuid.UUID) (int64, error)
	DeleteExpiredSession(ctx context.Context) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	GetActiveSessionUserInfo(ctx context.Context, id uuid.UUID) (GetActiveSessionUserInfoRow, error)
	GetAllEvents(ctx context.Context, userID uuid.UUID) ([]GetAllEventsRow, error)
	GetApplicationByUserAndEventID(ctx context.Context, arg GetApplicationByUserAndEventIDParams) (Application, error)
	GetByProviderAndAccountID(ctx context.Context, arg GetByProviderAndAccountIDParams) (AuthAccount, error)
	GetByUserID(ctx context.Context, userID uuid.UUID) ([]AuthAccount, error)
	GetCampaignByID(ctx context.Context, id uuid.UUID) (Campaign, error)
	GetEventByID(ctx context.Context, id uuid.UUID) (Event, error)
	GetEventRoleByIds(ctx context.Context, arg GetEventRoleByIdsParams) (EventRole, error)
	GetEventStaff(ctx context.Context, eventID uuid.UUID) ([]GetEventStaffRow, error)
	GetEventsWithUserInfo(ctx context.Context, arg GetEventsWithUserInfoParams) ([]GetEventsWithUserInfoRow, error)
	GetPublishedEvents(ctx context.Context, userID uuid.UUID) ([]GetPublishedEventsRow, error)
	GetSessionByID(ctx context.Context, id uuid.UUID) (AuthSession, error)
	GetSessionsByUserID(ctx context.Context, userID uuid.UUID) ([]AuthSession, error)
	GetUserByEmail(ctx context.Context, email *string) (AuthUser, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (AuthUser, error)
	InvalidateSessionByID(ctx context.Context, id uuid.UUID) error
	TouchSession(ctx context.Context, arg TouchSessionParams) error
	UpdateApplication(ctx context.Context, arg UpdateApplicationParams) error
	UpdateCampaignById(ctx context.Context, arg UpdateCampaignByIdParams) error
	UpdateEventById(ctx context.Context, arg UpdateEventByIdParams) error
	UpdateSessionExpiration(ctx context.Context, arg UpdateSessionExpirationParams) error
	UpdateTokens(ctx context.Context, arg UpdateTokensParams) error
	UpdateUser(ctx context.Context, arg UpdateUserParams) error
	UpdateUserOnboarded(ctx context.Context, id uuid.UUID) error
}

var _ Querier = (*Queries)(nil)
