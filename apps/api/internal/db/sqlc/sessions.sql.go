// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO auth.sessions (user_id, token, expires_at, ip_address, user_agent)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, token, expires_at, ip_address, user_agent, created_at, updated_at
`

type CreateSessionParams struct {
	UserID    uuid.UUID          `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	IpAddress *string            `json:"ip_address"`
	UserAgent *string            `json:"user_agent"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (AuthSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i AuthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredSession = `-- name: DeleteExpiredSession :exec
DELETE FROM auth.sessions
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredSession(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSession)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM auth.sessions
WHERE token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, token)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, expires_at, ip_address, user_agent, created_at, updated_at FROM auth.sessions
WHERE TOKEN = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (AuthSession, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i AuthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionsByUserID = `-- name: GetSessionsByUserID :many
SELECT id, user_id, token, expires_at, ip_address, user_agent, created_at, updated_at FROM auth.sessions
WHERE user_id = $1
`

func (q *Queries) GetSessionsByUserID(ctx context.Context, userID uuid.UUID) ([]AuthSession, error) {
	rows, err := q.db.Query(ctx, getSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthSession{}
	for rows.Next() {
		var i AuthSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.ExpiresAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionExpiration = `-- name: UpdateSessionExpiration :exec
UPDATE auth.sessions
SET expires_at = $2
WHERE id = $1
`

type UpdateSessionExpirationParams struct {
	ID        uuid.UUID          `json:"id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) UpdateSessionExpiration(ctx context.Context, arg UpdateSessionExpirationParams) error {
	_, err := q.db.Exec(ctx, updateSessionExpiration, arg.ID, arg.ExpiresAt)
	return err
}
