// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: campaigns.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (
    event_id,
    title, description,
    recipient_roles,
    created_by
) VALUES (
    $1, $2,
    coalesce($3, null),
    coalesce($4, null),
    $5
)
RETURNING id, event_id, title, description, recipient_roles, recipient_addresses, emails, created_by, created_at, updated_at
`

type CreateCampaignParams struct {
	EventID        uuid.UUID   `json:"event_id"`
	Title          string      `json:"title"`
	Description    interface{} `json:"description"`
	RecipientRoles interface{} `json:"recipient_roles"`
	CreatedBy      uuid.UUID   `json:"created_by"`
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, createCampaign,
		arg.EventID,
		arg.Title,
		arg.Description,
		arg.RecipientRoles,
		arg.CreatedBy,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Title,
		&i.Description,
		&i.RecipientRoles,
		&i.RecipientAddresses,
		&i.Emails,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCampaignById = `-- name: DeleteCampaignById :execrows
DELETE FROM campaigns
WHERE id = $1
`

func (q *Queries) DeleteCampaignById(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCampaignById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getCampaignById = `-- name: GetCampaignById :one
SELECT id, event_id, title, description, recipient_roles, recipient_addresses, emails, created_by, created_at, updated_at FROM campaigns 
WHERE id = $1
`

func (q *Queries) GetCampaignById(ctx context.Context, id uuid.UUID) (Campaign, error) {
	row := q.db.QueryRow(ctx, getCampaignById, id)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Title,
		&i.Description,
		&i.RecipientRoles,
		&i.RecipientAddresses,
		&i.Emails,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCampaignById = `-- name: UpdateCampaignById :exec
UPDATE campaigns
SET
    title = CASE WHEN $1::boolean THEN $2 ELSE title END,
    description = CASE WHEN $3::boolean THEN $4 ELSE description END,
    recipient_roles = CASE WHEN $5::boolean THEN $5 ELSE recipient_roles END,
    recipient_addresses = CASE WHEN $6::boolean THEN $6 ELSE recipient_addresses END,
    emails = CASE WHEN $7::boolean THEN $7 ELSE emails END
WHERE
    id = $8::uuid
returning id, event_id, title, description, recipient_roles, recipient_addresses, emails, created_by, created_at, updated_at
`

type UpdateCampaignByIdParams struct {
	TitleDoUpdate       bool      `json:"title_do_update"`
	Title               string    `json:"title"`
	DescriptionDoUpdate bool      `json:"description_do_update"`
	Description         *string   `json:"description"`
	RecipientRoles      bool      `json:"recipient_roles"`
	RecipientAddresses  bool      `json:"recipient_addresses"`
	Emails              bool      `json:"emails"`
	ID                  uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCampaignById(ctx context.Context, arg UpdateCampaignByIdParams) error {
	_, err := q.db.Exec(ctx, updateCampaignById,
		arg.TitleDoUpdate,
		arg.Title,
		arg.DescriptionDoUpdate,
		arg.Description,
		arg.RecipientRoles,
		arg.RecipientAddresses,
		arg.Emails,
		arg.ID,
	)
	return err
}
