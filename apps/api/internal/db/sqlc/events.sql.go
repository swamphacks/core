// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    name,
    application_open, application_close,
    start_time, end_time
) VALUES (
    $1,
    $2, $3,
    $4, $5
)
RETURNING id, name, description, location, location_url, max_attendees, application_open, application_close, rsvp_deadline, decision_release, start_time, end_time, website_url, is_published, saved_at, created_at, updated_at
`

type CreateEventParams struct {
	Name             string    `json:"name"`
	ApplicationOpen  time.Time `json:"application_open"`
	ApplicationClose time.Time `json:"application_close"`
	StartTime        time.Time `json:"start_time"`
	EndTime          time.Time `json:"end_time"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.ApplicationOpen,
		arg.ApplicationClose,
		arg.StartTime,
		arg.EndTime,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.LocationUrl,
		&i.MaxAttendees,
		&i.ApplicationOpen,
		&i.ApplicationClose,
		&i.RsvpDeadline,
		&i.DecisionRelease,
		&i.StartTime,
		&i.EndTime,
		&i.WebsiteUrl,
		&i.IsPublished,
		&i.SavedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, name, description, location, location_url, max_attendees, application_open, application_close, rsvp_deadline, decision_release, start_time, end_time, website_url, is_published, saved_at, created_at, updated_at FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.LocationUrl,
		&i.MaxAttendees,
		&i.ApplicationOpen,
		&i.ApplicationClose,
		&i.RsvpDeadline,
		&i.DecisionRelease,
		&i.StartTime,
		&i.EndTime,
		&i.WebsiteUrl,
		&i.IsPublished,
		&i.SavedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEventById = `-- name: UpdateEventById :exec
UPDATE events
SET
    name = coalesce($1, name),
    description = coalesce($2, description),
    location = coalesce($3, location),
    location_url = coalesce($4, location_url),
    max_attendees = coalesce($5, max_attendees),
    application_open = coalesce($6, application_open),
    application_close = coalesce($7, application_close),
    rsvp_deadline = coalesce($8, rsvp_deadline),
    decision_release = coalesce($9, decision_release),
    start_time = coalesce($10, start_time),
    end_time = coalesce($11, end_time),
    website_url = coalesce($12, website_url),
    is_published = coalesce($13, is_published)
WHERE
    id = $14::uuid
`

type UpdateEventByIdParams struct {
	Name             *string    `json:"name"`
	Description      *string    `json:"description"`
	Location         *string    `json:"location"`
	LocationUrl      *string    `json:"location_url"`
	MaxAttendees     *int32     `json:"max_attendees"`
	ApplicationOpen  *time.Time `json:"application_open"`
	ApplicationClose *time.Time `json:"application_close"`
	RsvpDeadline     *time.Time `json:"rsvp_deadline"`
	DecisionRelease  *time.Time `json:"decision_release"`
	StartTime        *time.Time `json:"start_time"`
	EndTime          *time.Time `json:"end_time"`
	WebsiteUrl       *string    `json:"website_url"`
	IsPublished      *bool      `json:"is_published"`
	ID               uuid.UUID  `json:"id"`
}

func (q *Queries) UpdateEventById(ctx context.Context, arg UpdateEventByIdParams) error {
	_, err := q.db.Exec(ctx, updateEventById,
		arg.Name,
		arg.Description,
		arg.Location,
		arg.LocationUrl,
		arg.MaxAttendees,
		arg.ApplicationOpen,
		arg.ApplicationClose,
		arg.RsvpDeadline,
		arg.DecisionRelease,
		arg.StartTime,
		arg.EndTime,
		arg.WebsiteUrl,
		arg.IsPublished,
		arg.ID,
	)
	return err
}
