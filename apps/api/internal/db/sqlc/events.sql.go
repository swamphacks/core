// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    id, name, description,
    location, location_url, max_attendees,
    application_open, application_close, rsvp_deadline, decision_release,
    start_time, end_time,
    website_url 
) VALUES (
    $1, $2, $3,
    $4, $5, $6,
    $7, $8, $9, $10,
    $11, $12,
    $13
)
RETURNING id, name, description, location, location_url, max_attendees, application_open, application_close, rsvp_deadline, decision_release, start_time, end_time, website_url, is_published, created_at, updated_at
`

type CreateEventParams struct {
	ID               uuid.UUID  `json:"id"`
	Name             string     `json:"name"`
	Description      *string    `json:"description"`
	Location         *string    `json:"location"`
	LocationUrl      *string    `json:"location_url"`
	MaxAttendees     *int32     `json:"max_attendees"`
	ApplicationOpen  time.Time  `json:"application_open"`
	ApplicationClose time.Time  `json:"application_close"`
	RsvpDeadline     *time.Time `json:"rsvp_deadline"`
	DecisionRelease  *time.Time `json:"decision_release"`
	StartTime        time.Time  `json:"start_time"`
	EndTime          time.Time  `json:"end_time"`
	WebsiteUrl       *string    `json:"website_url"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Location,
		arg.LocationUrl,
		arg.MaxAttendees,
		arg.ApplicationOpen,
		arg.ApplicationClose,
		arg.RsvpDeadline,
		arg.DecisionRelease,
		arg.StartTime,
		arg.EndTime,
		arg.WebsiteUrl,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.LocationUrl,
		&i.MaxAttendees,
		&i.ApplicationOpen,
		&i.ApplicationClose,
		&i.RsvpDeadline,
		&i.DecisionRelease,
		&i.StartTime,
		&i.EndTime,
		&i.WebsiteUrl,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, name, description, location, location_url, max_attendees, application_open, application_close, rsvp_deadline, decision_release, start_time, end_time, website_url, is_published, created_at, updated_at FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.LocationUrl,
		&i.MaxAttendees,
		&i.ApplicationOpen,
		&i.ApplicationClose,
		&i.RsvpDeadline,
		&i.DecisionRelease,
		&i.StartTime,
		&i.EndTime,
		&i.WebsiteUrl,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventByLocation = `-- name: GetEventByLocation :many
SELECT id, name, description, location, location_url, max_attendees, application_open, application_close, rsvp_deadline, decision_release, start_time, end_time, website_url, is_published, created_at, updated_at FROM events
WHERE location = $1
`

func (q *Queries) GetEventByLocation(ctx context.Context, location *string) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventByLocation, location)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Location,
			&i.LocationUrl,
			&i.MaxAttendees,
			&i.ApplicationOpen,
			&i.ApplicationClose,
			&i.RsvpDeadline,
			&i.DecisionRelease,
			&i.StartTime,
			&i.EndTime,
			&i.WebsiteUrl,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events
SET
    name = CASE WHEN $1::boolean THEN $2 ELSE name END,
    description = CASE WHEN $3::boolean THEN $4 ELSE description END,
    location = CASE WHEN $5::boolean THEN $6 ELSE location END,
    location_url = CASE WHEN $7::boolean THEN $8 ELSE location_url END,
    max_attendees = CASE WHEN $9::boolean THEN $10 ELSE max_attendees END,
    application_open = CASE WHEN $11::boolean THEN $12 ELSE application_open END,
    application_close = CASE WHEN $13::boolean THEN $14 ELSE application_close END,
    rsvp_deadline = CASE WHEN $15::boolean THEN $16 ELSE rsvp_deadline END,
    decision_release = CASE WHEN $17::boolean THEN $18 ELSE decision_release END,
    start_time = CASE WHEN $19::boolean THEN $20 ELSE start_time END,
    end_time = CASE WHEN $21::boolean THEN $22 ELSE end_time END,
    website_url = CASE WHEN $23::boolean THEN $24 ELSE website_url END,
    is_published = CASE WHEN $25::boolean THEN $26 ELSE is_published END
WHERE
    id = $27::uuid
`

type UpdateEventParams struct {
	NameDoUpdate             bool       `json:"name_do_update"`
	Name                     string     `json:"name"`
	DescriptionDoUpdate      bool       `json:"description_do_update"`
	Description              *string    `json:"description"`
	LocationDoUpdate         bool       `json:"location_do_update"`
	Location                 *string    `json:"location"`
	LocationUrlDoUpdate      bool       `json:"location_url_do_update"`
	LocationUrl              *string    `json:"location_url"`
	MaxAttendeesDoUpdate     bool       `json:"max_attendees_do_update"`
	MaxAttendees             *int32     `json:"max_attendees"`
	ApplicationOpenDoUpdate  bool       `json:"application_open_do_update"`
	ApplicationOpen          time.Time  `json:"application_open"`
	ApplicationCloseDoUpdate bool       `json:"application_close_do_update"`
	ApplicationClose         time.Time  `json:"application_close"`
	RsvpDeadlineDoUpdate     bool       `json:"rsvp_deadline_do_update"`
	RsvpDeadline             *time.Time `json:"rsvp_deadline"`
	DecisionReleaseDoUpdate  bool       `json:"decision_release_do_update"`
	DecisionRelease          *time.Time `json:"decision_release"`
	StartTimeDoUpdate        bool       `json:"start_time_do_update"`
	StartTime                time.Time  `json:"start_time"`
	EndTimeDoUpdate          bool       `json:"end_time_do_update"`
	EndTime                  time.Time  `json:"end_time"`
	WebsiteUrlDoUpdate       bool       `json:"website_url_do_update"`
	WebsiteUrl               *string    `json:"website_url"`
	IsPublishedDoUpdate      bool       `json:"is_published_do_update"`
	IsPublished              *bool      `json:"is_published"`
	ID                       uuid.UUID  `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.NameDoUpdate,
		arg.Name,
		arg.DescriptionDoUpdate,
		arg.Description,
		arg.LocationDoUpdate,
		arg.Location,
		arg.LocationUrlDoUpdate,
		arg.LocationUrl,
		arg.MaxAttendeesDoUpdate,
		arg.MaxAttendees,
		arg.ApplicationOpenDoUpdate,
		arg.ApplicationOpen,
		arg.ApplicationCloseDoUpdate,
		arg.ApplicationClose,
		arg.RsvpDeadlineDoUpdate,
		arg.RsvpDeadline,
		arg.DecisionReleaseDoUpdate,
		arg.DecisionRelease,
		arg.StartTimeDoUpdate,
		arg.StartTime,
		arg.EndTimeDoUpdate,
		arg.EndTime,
		arg.WebsiteUrlDoUpdate,
		arg.WebsiteUrl,
		arg.IsPublishedDoUpdate,
		arg.IsPublished,
		arg.ID,
	)
	return err
}
