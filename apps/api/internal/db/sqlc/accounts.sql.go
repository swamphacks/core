// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO auth.accounts (
    user_id, provider_id, account_id, hashed_password,
    access_token, refresh_token, id_token,
    access_token_expires_at, refresh_token_expires_at, scope
) VALUES (
    $1, $2, $3, $4,
    $5, $6, $7,
    $8, $9, $10
)
RETURNING id, user_id, provider_id, account_id, hashed_password, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, created_at, updated_at
`

type CreateAccountParams struct {
	UserID                uuid.UUID  `json:"user_id"`
	ProviderID            string     `json:"provider_id"`
	AccountID             string     `json:"account_id"`
	HashedPassword        *string    `json:"hashed_password"`
	AccessToken           *string    `json:"access_token"`
	RefreshToken          *string    `json:"refresh_token"`
	IDToken               *string    `json:"id_token"`
	AccessTokenExpiresAt  *time.Time `json:"access_token_expires_at"`
	RefreshTokenExpiresAt *time.Time `json:"refresh_token_expires_at"`
	Scope                 *string    `json:"scope"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (AuthAccount, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.UserID,
		arg.ProviderID,
		arg.AccountID,
		arg.HashedPassword,
		arg.AccessToken,
		arg.RefreshToken,
		arg.IDToken,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
		arg.Scope,
	)
	var i AuthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderID,
		&i.AccountID,
		&i.HashedPassword,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM auth.accounts
WHERE provider_id = $1 AND account_id = $2
`

type DeleteAccountParams struct {
	ProviderID string `json:"provider_id"`
	AccountID  string `json:"account_id"`
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.Exec(ctx, deleteAccount, arg.ProviderID, arg.AccountID)
	return err
}

const getAccountByProvider = `-- name: GetAccountByProvider :one
SELECT id, user_id, provider_id, account_id, hashed_password, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, created_at, updated_at FROM auth.accounts
WHERE provider_id = $1 AND account_id = $2
`

type GetAccountByProviderParams struct {
	ProviderID string `json:"provider_id"`
	AccountID  string `json:"account_id"`
}

func (q *Queries) GetAccountByProvider(ctx context.Context, arg GetAccountByProviderParams) (AuthAccount, error) {
	row := q.db.QueryRow(ctx, getAccountByProvider, arg.ProviderID, arg.AccountID)
	var i AuthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderID,
		&i.AccountID,
		&i.HashedPassword,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountsByUserID = `-- name: GetAccountsByUserID :many
SELECT id, user_id, provider_id, account_id, hashed_password, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, created_at, updated_at FROM auth.accounts
WHERE user_id = $1
`

func (q *Queries) GetAccountsByUserID(ctx context.Context, userID uuid.UUID) ([]AuthAccount, error) {
	rows, err := q.db.Query(ctx, getAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthAccount{}
	for rows.Next() {
		var i AuthAccount
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProviderID,
			&i.AccountID,
			&i.HashedPassword,
			&i.AccessToken,
			&i.RefreshToken,
			&i.IDToken,
			&i.AccessTokenExpiresAt,
			&i.RefreshTokenExpiresAt,
			&i.Scope,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTokens = `-- name: UpdateTokens :exec
UPDATE auth.accounts
SET access_token = $3,
    refresh_token = $4,
    id_token = $5,
    access_token_expires_at = $6,
    refresh_token_expires_at = $7,
    scope = $8
WHERE provider_id = $1 AND account_id = $2
`

type UpdateTokensParams struct {
	ProviderID            string     `json:"provider_id"`
	AccountID             string     `json:"account_id"`
	AccessToken           *string    `json:"access_token"`
	RefreshToken          *string    `json:"refresh_token"`
	IDToken               *string    `json:"id_token"`
	AccessTokenExpiresAt  *time.Time `json:"access_token_expires_at"`
	RefreshTokenExpiresAt *time.Time `json:"refresh_token_expires_at"`
	Scope                 *string    `json:"scope"`
}

func (q *Queries) UpdateTokens(ctx context.Context, arg UpdateTokensParams) error {
	_, err := q.db.Exec(ctx, updateTokens,
		arg.ProviderID,
		arg.AccountID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.IDToken,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
		arg.Scope,
	)
	return err
}
