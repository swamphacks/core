{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Core","text":"<p>Welcome to Core, the central hub for all things tech at SwampHacks. This repository is your go-to source for everything related to our technology, tools, and development efforts. Whether you're a new contributor or a seasoned member, you'll find what you need here.</p> <p>Core is the foundation of SwampHacks's tech ecosystem. It includes:</p> <ul> <li>Documentation: Guides, tutorials, and resources.</li> <li>Code: Backend and frontend code for our event management systems, bots, and other projects.</li> <li>Resources: Templates, best practices, and tools to help you get started.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the monorepo for our hackathon event management system. This repository contains all major services powering our platform, including:</p> <ul> <li>Web \u2013 The frontend dashboard for organizers and attendees.</li> <li>API \u2013 The core backend service responsible for business logic, data management, and integrations.</li> <li>Discord Bot \u2013 A companion bot for community engagement and operations. (Currently independent, may depend on the API in the future.)</li> </ul> <p>Each project has its own dedicated documentation tab for detailed setup and usage. This page covers the global setup needed to get the monorepo running locally.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following are installed:</p> <ul> <li>Docker Engine</li> <li>Docker Compose (if not included with Docker)</li> <li>Git</li> <li><code>make</code> (optional, but helpful for managing workflows)</li> </ul>"},{"location":"getting-started/#initial-setup","title":"Initial Setup","text":"<ol> <li>Clone the repository: Terminal/Shell<pre><code>git clone https://github.com/swamphacks/core\n\ncd core\n</code></pre></li> <li> <p>Set Up the API The API powers the platform's business logic, database operations, and integrations. Please follow the API's Installation Guide to complete the setup. Once you're done, return here to continue with the other services.</p> </li> <li> <p>Set Up the Web Dashboard After the API is running, you can set up the frontend dashboard for organizers and attendees. Follow the Web Installation Guide to install dependencies, configure environment variables, and run the app locally.</p> </li> <li> <p>Set Up the Discord Bot (OPTIONAL) The Discord Bot helps manage community engagement and provides real-time updates during the event. Refer to the Discord Bot Installation Guide for instructions on setup, permissions, and development workflow.</p> </li> </ol> <p>Now that you are done with setting up each project, continue down below to developing using docker.</p>"},{"location":"getting-started/#running-development-with-docker","title":"Running Development with Docker","text":"<p>Ensure Running In Root Directory</p> <p>The following commands to begin development with docker MUST be run in root. Your working directory should be <code>core/</code>.</p> <p>Now that you have all the main projects set up, you can use docker and docker compose to quickly start a development environment.</p>"},{"location":"getting-started/#docker-compose","title":"Docker Compose","text":"<p>We can use <code>docker compose</code> to quickly start up both our API and Web projects as well as local databases and caches. In the root of the monorepo, run the following in your terminal: Terminal/Shell<pre><code>docker compose up\n</code></pre></p>"},{"location":"getting-started/#docker-compose-with-rebuilding","title":"Docker Compose with Rebuilding","text":"<p>Sometimes we need to rebuild the docker environment and container in order to apply changes. This is more of a rare instance but in case you do need to ensure everything is rebuilt, run docker with the <code>--build</code> flag. Terminal/Shell<pre><code>docker compose up --build\n</code></pre></p>"},{"location":"getting-started/#docker-compose-for-api-development","title":"Docker Compose for API Development","text":"<p>For all our backend developers out there, most of the time you don't need to spin up every application in order to use and test the backend. In cases where you only want to run the API without the web, specify <code>api</code> in the command. Terminal/Shell<pre><code>docker compose up api\n</code></pre></p> <p>Database and Cache</p> <p>Although it won't start the web service anymore, the database and redis cache WILL be started every single time the API service runs as it depends on the database and redis cache to function.</p> <p>\u2705 Be sure to check that the API is running properly before launching the Web or Bot services, as they may rely on API endpoints.</p>"},{"location":"api/","title":"API Overview","text":"<p>The SwampHacks API is the core backend service that powers all technical systems, including the web dashboard and Discord bot. It acts as the central source of truth for users, applications, events, and teams.</p>"},{"location":"api/#purpose","title":"Purpose","text":"<p>The API provides structured, secure access to all hackathon data and functionality:</p> <ul> <li>Serve and validate user sessions</li> <li>Enforce role-based access and permissions</li> <li>Handle CRUD operations across domains (users, events, projects, etc.)</li> <li>Connect frontend and automation tools through a consistent interface</li> </ul>"},{"location":"api/#consumers","title":"Consumers","text":"<p>The API is designed for use by:</p> <ul> <li>Web Dashboard: UI for organizers, hackers, mentors, and judges</li> <li>Discord Bot: Handles real-time updates, commands, and integrations</li> <li>Internal Tools: Scripts and workflows (e.g. onboarding, analytics)</li> </ul>"},{"location":"api/#integration","title":"Integration","text":"<p>All clients communicate with the API via HTTP using secure, authenticated requests. The system is designed for modular growth and can easily support future bots, portals, or tools.</p> <p>This page offers a high-level overview. For deeper implementation or contributing info, see other sections of the docs.</p>"},{"location":"api/db_testing/","title":"Database testing","text":""},{"location":"api/db_testing/#manual","title":"Manual","text":"<ol> <li>Make sure the docker instance is currently running (i.e. you ran <code>$ docker compose up</code>)</li> </ol> <p>Note</p> <p>You may have to run docker with sudo depending on your system configuration.</p> <ol> <li> <p>In a seperate terminal (I suggest you try using tmux) list the current docker processes <pre><code>docker ps\n</code></pre></p> </li> <li> <p>Copy the process id for the docker container running postgres, and paste into the following command in order to spawn a shell with access to the container. <pre><code>sudo docker exec -it ef7XXXXXX07e sh\n</code></pre></p> </li> <li> <p>Connect to the postgres database using a database url. The url can be found inside <code>core/apps/api/.env.example</code>.  <pre><code>psql postgres://postgres:postgres@postgres:5432/coredb\n</code></pre></p> </li> <li> <p>Check to see if database tables currently exist. You can by listing the currently created tables. <pre><code>\\dt\n</code></pre> If there is nothing here, then go into <code>/core/apps/api</code> and run <code>make migrate</code>, which runs sql commands added to migrations in <code>core/apps/api/internal/db/migrations</code>.</p> </li> <li>You can now test to see if rows, columns and tables are updated appropriately with psql commands. Use a reference to psql if you need help finding commands.</li> </ol>"},{"location":"api/installation/","title":"Getting Started","text":""},{"location":"api/installation/#setup-with-docker-compose-main-setup","title":"Setup with Docker Compose (main setup)","text":"<ol> <li> <p>Navigate to <code>core/apps/api</code></p> </li> <li> <p>Set up environment variables: <pre><code>cp .env.dev.example .env.dev\n</code></pre></p> </li> <li> <p>Open <code>.env.dev</code></p> <ol> <li> <p>For <code>AUTH_DISCORD_CLIENT_ID</code> and <code>AUTH_DISCORD_CLIENT_SECRET</code>, go to the Discord developer portal and create an account. Create a new application and go to the OAuth2 tab in the left sidebar. Copy the Client ID and the Client Secret into their respective environment variables.</p> </li> <li> <p>While in the OAuth2 menu, copy the <code>AUTH_DISCORD_REDIRECT_URI</code> parameter from the example configuration and paste into the box under the Redirects header. This is the URL which discord will redirect the user to after Discord authentication has completed.</p> </li> <li> <p>Fill out any other required keys and tokens, if empty.</p> </li> </ol> </li> <li> <p>Continue with the main setup instructions</p> </li> </ol>"},{"location":"api/installation/#setup-without-docker-compose","title":"Setup without Docker Compose","text":"<ol> <li>Make sure you have Go installed on your system.</li> <li> <p>Initialize the Go project <pre><code>go mod tidy\n</code></pre> <pre><code>go install github.com/air-verse/air@latest\ngo install github.com/sqlc-dev/sqlc/cmd/sqlc@latest\ngo install github.com/pressly/goose/v3/cmd/goose@latest\n</code></pre></p> </li> <li> <p>Run the program with <pre><code>air\n</code></pre></p> </li> </ol>"},{"location":"discord-bot/","title":"Discord Bot Overview","text":"<p>The SwampHacks Discord Bot is our automation layer inside the event\u2019s main communication hub. It connects participants, mentors, and organizers with live event features \u2014 directly within Discord.</p>"},{"location":"discord-bot/#purpose","title":"Purpose","text":"<p>The bot enhances engagement and coordination by:</p> <ul> <li>Automating onboarding and role assignment</li> <li>Sharing real-time event updates and announcements</li> <li>Handling FAQs, schedules, and project links</li> <li>Bridging the gap between Discord and our internal systems</li> </ul>"},{"location":"discord-bot/#users","title":"Users","text":"<p>The bot is built for:</p> <ul> <li>Hackers: Instant answers, project support, reminders</li> <li>Mentors: Role signup and availability status</li> <li>Organizers: Command tools, announcement scheduling, moderation support</li> </ul>"},{"location":"discord-bot/#key-features","title":"Key Features","text":"<ul> <li>Slash commands for info, schedules, and submissions</li> <li>Auto-role assignment based on application data</li> <li>Realtime announcements synced from the dashboard</li> <li>Event reminders and support workflows</li> </ul>"},{"location":"discord-bot/#integration","title":"Integration","text":"<p>The bot communicates with the SwampHacks API for user data, permissions, and live content. It is fully event-aware and supports syncing updates in real-time from other systems.</p> <p>This overview introduces the bot\u2019s role. For setup or contribution info, refer to the the latter sections of the docs.</p>"},{"location":"discord-bot/commands/","title":"Commands","text":"<p>SwampHacks Discord Bot commands will go here.</p>"},{"location":"discord-bot/installation/","title":"Getting Started","text":""},{"location":"docs/","title":"Docs Overview","text":"<p>Documentation system to make sure everyone knows how everything works. Vital for the longevity of any long term software engineering project.</p>"},{"location":"docs/#rationale","title":"Rationale","text":"<p>We decided to make our documentation using a MkDocs project living in the same GitHub repository as everything else. Why this over something like a GitHub wiki? The answer is simple:</p> <ul> <li> <p>Developers can add documentation changes in the same Git commits as their work. This ensures that when a new feature is added, it will be apparent whether or not related documentation was also made when a pull request is reviewed.</p> </li> <li> <p>GitHub Actions can hook up pushed changes to update a website, meaning no one person has to manage changes to the documentation in a seperate repository.</p> </li> <li> <p>Writing in markdown files can be moved to a different documentation site generator if needed, and can be easily edited by non-engineers.</p> </li> </ul>"},{"location":"docs/installation/","title":"Gettings Started","text":""},{"location":"docs/installation/#normal-setup","title":"Normal setup","text":"<ol> <li>Install mkdocs</li> <li>Install the python packages listed in core/apps/docs/requirements.txt</li> <li>Run:</li> </ol> <pre><code>mkdocs serve\n</code></pre> <p>Warning</p> <p>If the site does not generate because there is still missing dependancies, you can find them using mkdocs-get-deps</p>"},{"location":"docs/installation/#for-linux-distributions-which-do-not-package-python-packages-through-pip","title":"For linux distributions which do not package python packages through pip","text":"<p>This includes Arch Linux.</p> <ol> <li>Run <pre><code>python -m venv env\nsource env/bin/activate\n</code></pre></li> <li>Install packages <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>Run with <pre><code>mkdocs serve\n</code></pre></li> </ol> <p>Now just make normal changes to the documentation and the site will update automatically. Make commits and push your changes when you're done!</p>"},{"location":"web/","title":"Web Overview","text":"<p>The SwampHacks Web Dashboard is the central interface for managing the hackathon experience. It brings together organizers, hackers, mentors, and judges in a unified, role-aware platform.</p>"},{"location":"web/#purpose","title":"Purpose","text":"<p>The dashboard is built to support the full lifecycle of a hackathon:</p> <ul> <li>Organize events and logistics</li> <li>Manage participants, mentors, and judges</li> <li>Enable registration, scheduling, and submissions</li> <li>Provide real-time updates during the event</li> </ul>"},{"location":"web/#users","title":"Users","text":"<p>The system supports multiple roles:</p> <ul> <li>Organizers: Admin views, user management, analytics</li> <li>Hackers: Registration, team creation, event notifications</li> <li>Judges: Project browsing and scoring (coming soon)</li> </ul>"},{"location":"web/#key-features","title":"Key Features","text":"<ul> <li>User registration and application review.</li> <li>Event/Workshop scheduling</li> <li>Check in and hardware integrations</li> <li>Discord and other media channel integrations</li> <li>And much more...</li> </ul>"},{"location":"web/#integration","title":"Integration","text":"<p>The dashboard communicates with our internal API and supports real-time updates. Future versions will integrate directly with Discord and sponsor tooling.</p>"},{"location":"web/features/","title":"Features","text":""},{"location":"web/features/#authentication","title":"Authentication","text":"<p>SwampHacks' authentication system is built using our own authentication library, with an API inspired by NextAuth.js. Currently, it supports Discord Oauth2 for log in and registration.</p>"},{"location":"web/features/#implementation","title":"Implementation","text":"<p>Our auth library uses the Authorization Code Grant, which allows our backend server to retrieve an access code and exchange it for the user's access token.</p> <p>The auth library can be initialized like so:</p> <pre><code>const authClient = Auth({\n  providers: [Discord],\n  redirect_uri: &lt;insert backend's url to handle oauth callback&gt;,\n});\n</code></pre> <p>The library is flexible enough to handle more providers other than Discord. A provider has following type:</p> <pre><code>type Provider = {\n  id: string;\n  authorization: {\n    url: string;\n    scopes: string;\n    clientId: string;\n  };\n}\n</code></pre> <p>To create a new provider, the <code>createProvider</code> function in <code>providers.ts</code> must be called so that types are inferred correctly.</p> <p>For example:</p> <pre><code>const Google = createProvider({\n  id: \"google\",\n  authorization: {\n    url: &lt;Google Oauth url&gt;,\n    scopes: &lt;Oauth scopes&gt;,\n    clientId: &lt;obtain client id from Google developer portal&gt;,\n  },\n});\n</code></pre>"},{"location":"web/installation/","title":"Getting Started","text":""},{"location":"web/installation/#setup-with-docker-compose-main-setup","title":"Setup with Docker Compose (main setup)","text":"<ol> <li> <p>Navigate to <code>core/apps/web</code></p> </li> <li> <p>Set up environment variables: <pre><code>cp .env.example .env\n</code></pre></p> </li> </ol> <p>Fill in the required keys and tokens in your new <code>.env</code> file. For <code>VITE_DISCORD_OAUTH_CLIENT_ID</code>, retrive the token via the instructions given in the API installation page.</p> <p><code>VITE_</code> must be prefixed to all environment variables in order for them to be accessible.</p> <ol> <li>Continue with the main setup instructions</li> </ol>"},{"location":"web/installation/#setup-without-docker-compose","title":"Setup without Docker Compose","text":"<ol> <li> <p>Make sure pnpm is installed on your system.</p> </li> <li> <p>Navigate to <code>core/apps/web</code></p> </li> <li> <p>Install dependencies</p> </li> </ol> <pre><code>pnpm install\n</code></pre> <ol> <li>Configure environment variables:</li> </ol> <pre><code>cp .env.example .env\n</code></pre> <p>Fill in the required keys and tokens in your new <code>.env</code> file.</p> <p><code>VITE_</code> must be prefixed to all environment variables in order for them to be accessible.</p> <ol> <li>Finally, launch the app</li> </ol> <pre><code>pnpm run dev\n</code></pre>"}]}