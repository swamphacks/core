openapi: 3.0.0
info:
  title: SwampHacks Core
  version: '1.0'
  description: SwampHacks is University of Florida's flagship hackathon. This is the API interface for SwampHacks's server and resources.
  contact:
    name: SwampHacks Tech
    url: 'https://github.com/swamphacks'
    email: tech@swamphacks.com
  termsOfService: 'https://app.swamphacks.com/terms'
  license:
    name: APACHE LICENSE 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  - url: 'http://localhost:8080'
    description: Local Development
  - url: 'https://dev.api.swamphacks.com'
    description: Staging
  - url: 'https://api.swamphacks.com'
    description: Production
paths:
  /auth/callback:
    post:
      summary: OAuth2 Auth Callback
      responses:
        '200':
          description: 'OK: User is logged in successfully. For when the redirect field is empty.'
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Sets a sh_session cookie to signify auth status
        '302':
          description: 'Found: Logged in and redirected to a requested location'
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Sets a sh_session cookie to signify auth status
        '400':
          description: 'Bad Request: Something went wrong with the request queries or their properties'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad code or state:
                  value:
                    code: A100
                    error: invalid_callback
                    message: Missing or malformed code or state in callback
                Example 1:
                  value:
                    code: A103
                    error: unknown_provider
                    message: '{{provider}} is not a supported provider'
        '403':
          description: 'Forbidden: Something went wrong verifying identity or authenticating.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Invalid Nonce:
                  value:
                    code: A101
                    error: nonce_mismatch
                    message: Nonce in state does not match cookie
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Create user fail:
                  value:
                    code: A401
                    error: create_user_failed
                    message: Something went wrong trying to create a user.
        '502':
          description: 'Bad Gateway: Authenticating OAuth server did not respond or user does not exist '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Failed gateway:
                  value:
                    code: A105
                    error: oauth_gateway
                    message: 'Failed to retrieve OAuth profile from {{provider}}'
      operationId: post-v1-auth-callback
      description: This route is used for OAuth authentication methods to verify and login/create an account.
      security: []
      parameters:
        - schema:
            type: string
          in: query
          name: code
          required: true
          description: The OAuth code passed back from the provider. Part of the PKCE flow.
        - schema:
            type: string
          in: query
          name: state
          required: true
          description: 'The state containing a base64 encoded version of the nonce, provider, and redirect url.'
        - schema:
            type: string
          in: cookie
          name: sh_auth_nonce
          required: true
          description: The nonce for comparing against the callback state decoded to prevent CSRF attacks.
      tags:
        - Authentication
  /auth/me:
    get:
      summary: Get Current User
      responses:
        '200':
          description: 'OK: Current user data returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
              examples:
                Normal user:
                  value:
                    userId: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    name: John Apple
                    onboarded: false
                    image: 'https://example.com/cat.jpeg'
                    role: user
                Admin user:
                  value:
                    userId: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    name: Mark Scout
                    onboarded: true
                    image: 'http://lumoncorp.com/marks_pfp.jpeg'
                    role: superuser
        '401':
          $ref: '#/components/responses/Unauthenticated'
        5XX:
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: get-auth-me
      description: Get the currently authenticated user's information.
      security:
        - sh_session: []
      parameters:
        - schema:
            type: string
          in: cookie
          name: sh_session
          description: The authenticated session token/id
      tags:
        - Authentication
  /events/{eventId}/interest:
    post:
      summary: Make an interest submission for an event (email list)
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@ufl.edu
                source:
                  type: string
                  example: "SHX Frontpage"
      responses:
        '201':
          description: 'OK: Interest email created'
        '400':
          description: 'Bad request/Malformed request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: missing_email
                    message: Email is required
        '409':
          description: 'Duplicate email found in DB'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: duplicate_email
                    message: Email is already registered for this event
                
        5XX:
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: post-event-interest
      tags:
        - Event
  /events:
    get:
      summary: Get events
      description: Gets events with a nullable event role for authenticated users.
      parameters:
        - name: include_published
          in: query
          description: If true, include unpublished events as well. Superusers ONLY.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'OK: Events returned'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventWithUserInfo'

      operationId: get-events
      tags:
        - Event
    post:
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - application_open
                - application_close
                - start_time
                - end_time
              properties:
                name:
                  type: string
                  example: "Open Software Club's Workshop"
                application_open:
                  type: string
                  format: date-time
                  example: 2025-08-01T08:00:00Z
                application_close:
                  type: string
                  format: date-time
                  example: 2025-12-01T023:59:00Z
                start_time:
                  type: string
                  format: date-time
                  example: 2026-02-10T17:00:00Z
                end_time:
                  type: string
                  format: date-time
                  example: 2026-02-12T08:00:00Z
                description:
                  type: string
                location:
                  type: string
                location_url:
                  type: string
                max_attendees:
                  type: integer
                rsvp_deadline:
                  type: string
                  format: date-time
                  example: 2025-08-01T08:00:00Z
                decision_release:
                  type: string
                  format: date-time
                  example: 2025-08-01T08:00:00Z
                website_url:
                  type: string
                is_published:
                  type: boolean 
      responses:
        '201':
          description: 'OK: Event created'
          content:
            application/json:
              $ref: '#/components/schemas/Event'
        '400':
          description: 'Bad request/Malformed request'
          content:
            application/json:
              $ref: '#/components/schemas/ErrorResponse'
            examples:
              Example 1:
                value:
                  error: invalid_request
                  message: Could not parse request body
        '409':
          description: 'endTime is before startTime or applicationClose is before applicationOpen'
          content:
            schema:
               $ref: '#/components/schemas/ErrorResponse'
            examples:
              Example 1:
                value:
                  error: time_conflict
                  message: endTime is before startTime or applicationClose is before applicationOpen
        5XX:
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: post-event
      tags:
        - Event
  /events/{eventId}:
    parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get an event
      responses:
        '201':
          description: OK - Event received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '5XX':
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: get-single-event
      tags:
      - Event
    patch:
      summary: Update an event
      responses:
        '204':
          description: OK - Event updated (patched)
        '5XX':
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: patch-event
      tags:
      - Event
    delete:
      summary: Delete an event
      responses:
        '204':
          description: OK - Event deleted (patched)
        '5XX':
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: delete-event
      tags:
      - Event
  /events/{eventId}/staff:
    parameters:
    - name: eventId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    get:
      summary: Get all staff users for an event
      description: Gets all users with role STAFF or ADMIN
      responses:
        '200':
          description: OK - Return users
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/UserWithEventRole'
        '5XX':
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: get-event-staff
      tags:
        - Event
  /events/{eventId}/roles:
    parameters:
    - name: eventId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    post:
      summary: Change or add event role of a user 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  nullable: true
                  example: "user@example.com"
                user_id:
                  type: string
                  nullable: true
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174000"
                role:
                  $ref: '#/components/schemas/EventRole'
              required:
                - role
      responses:
        '200':
          description: OK - Return users
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: user_not_found
                    message: User could not be found.
        '5XX':
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: post-event-role
      tags:
        - Event
  /events/{eventId}/role:
    parameters:
    - name: eventId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    get:
      summary: Get the current user's event role for an event
      responses:
        '200':
          description: OK - Return role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NullableEventRoleRow'
              examples:
                Example 1:
                  value:
                    role: attendee
                    user_id: 123e4567-e89b-12d3-a456-426614174000
                    event_id: 123e4567-e89b-12d3-a456-426614174001
                    assigned_at: 2025-08-08T17:00:00Z
                Example 2 (no role):
                  value:
                    role: null
                    user_id: 123e4567-e89b-12d3-a456-426614174000
                    event_id: 123e4567-e89b-12d3-a456-426614174001
                    assigned_at: null
        '400':
          description: Not Found - Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: invalid_event_id
                    message: Event ID missing or malformed.
        '404':
          description: Not Found - Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: user_not_found
                    message: User could not be found.
        '5XX':
          description: 'Server Error: Something went terribly wrong on our end.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    error: internal_err
                    message: Something went wrong on our end.
      operationId: get-user-event-role
      tags:
        - Event
components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        location_url:
          type: string
          format: uri
          nullable: true
        max_attendees:
          type: integer
          format: int32
          nullable: true
        application_open:
          type: string
          format: date-time
        application_close:
          type: string
          format: date-time
        rsvp_deadline:
          type: string
          format: date-time
          nullable: true
        decision_release:
          type: string
          format: date-time
          nullable: true
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        website_url:
          type: string
          format: uri
          nullable: true
        is_published:
          type: boolean
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - name
        - application_open
        - application_close
        - start_time
        - end_time
    ErrorResponse:
      title: ErrorResponse
      type: object
      description: 'This model is returned on server errors, it returns an error code (lookup code definitions in documentation), an error key, and a message.'
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
    UserContext:
      title: UserContext
      type: object
      description: This is the model used when returning from GetMe. Used often in middleware!
      required:
        - userId
        - name
        - onboarded
        - role
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        onboarded:
          type: boolean
        image:
          type: string
          format: uri
          nullable: true
        role:
          $ref: '#/components/schemas/PlatformRole'
    PlatformRole:
      title: PlatformRole
      type: string
      enum:
        - user
        - superuser
      description: A user's role on the platform. Either base permissions or elevated superuser perms.
    Session:
      title: Session
      type: object
      required:
        - id
        - user_id
        - expires_at
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        expires_at:
          type: string
          format: date-time
        ip_address:
          type: string
          nullable: true
        user_agent:
          type: string
          nullable: true
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          nullable: true
          example: "john@example.com"
        email_verified:
          type: boolean
          example: true
        onboarded:
          type: boolean
          example: false
        image:
          type: string
          nullable: true
          format: uri
          example: "https://example.com/avatar.jpg"
        created_at:
          type: string
          format: date-time
          example: "2025-08-08T17:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-08T18:00:00Z"
        role:
          $ref: '#/components/schemas/UserRole'
      required:
        - id
        - name
        - email_verified
        - onboarded
        - created_at
        - updated_at
        - role
    UserWithEventRole:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            event_role:
              $ref: '#/components/schemas/EventRole'
          required:
            - event_role
    UserRole:
      type: string
      enum:
        - user
        - superuser
      example: user
    EventRole:
      type: string
      enum:
        - admin
        - staff
        - attendee
        - applicant
      example: attendee
    ApplicationStatus:
      type: string
      enum:
        - started
        - submitted
        - under_review
        - accepted
        - rejected
        - waitlisted
        - withdrawn
      example: under_review
    EventWithUserInfo:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          properties:
            event_role:
              type: object
              properties:
                event_role_type:
                  $ref: '#/components/schemas/EventRole'
                valid:
                  type: boolean
              required:
                - event_role_type
                - valid
            application_status:
              type: object
              properties:
                application_status:
                  $ref: '#/components/schemas/ApplicationStatus'
                valid:
                  type: boolean
              required:
                - application_status
                - valid
    NullableEventRoleRow:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/EventRole'
          nullable: true
        user_id:
          type: string
          format: uuid
        event_id:
          type: string
          format: uuid
        assigned_at:
          type: string
          format: date-time
      required:
        - user_id
        - event_id
  securitySchemes:
    sh_session_id:
      type: http
      scheme: oauth
  responses:
    Unauthenticated:
      description: 'Unauthenticated: Requester is not currently authenticated.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            Unauthenticated:
              value:
                error: no_auth
                message: Not authenticated
      headers: {}
    Unauthorized:
      description: 'Unauthorized: User does not have access to this resource.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            No access:
              value:
                code: A002
                error: forbidden
                message: You don't have access to this resource
    Bad-Request:
      description: ''
security:
  - {}
  - sh_session_id: []
