name: Deploy API to Production

on:
  push:
    branches:
      - master
    paths:
      - 'apps/api/**'
      - 'infra/docker-compose.api.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/core-api:latest \
            ./apps/api
          docker push ghcr.io/${{ github.repository_owner }}/core-api:latest

  run-migrations:
    name: Run Goose Migrations
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Goose
        run: |
          curl -fsSL https://raw.githubusercontent.com/pressly/goose/master/install.sh | sh

      - name: Run migrations
        run: |
          goose -dir ./apps/api/internal/db/migrations postgres "${{ secrets.PROD_DB_URL }}" up

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: [build-and-push, run-migrations]

    steps:
      - name: SSH proxy commmand
        env:
          INFISICAL_CLIENT_ID: ${{ secrets.INFISICAL_CLIENT_ID }}
          INFISICAL_CLIENT_SECRET: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.API_HOST }}
          username: root
          password: ${{ secrets.API_PASSWORD }}
          script: |
            cd /root/core/infra
            git fetch
            git checkout master
            git reset --hard origin/master
            git pull

            export INFISICAL_TOKEN=$(infisical login \
              --method=universal-auth \
              --client-id=${INFISICAL_CLIENT_ID} \
              --client-secret=${INFISICAL_CLIENT_SECRET} \
              --silent \
              --plain)

            infisical export \
              --token=$INFISICAL_TOKEN \
              --env=prod \
              --format=dotenv \
              --path="/api" \
              --projectId=$INFISICAL_PROJECT_ID \
              > ./secrets/.env.api
                        
            docker compose -f docker-compose.api.yml pull api
            docker compose -f docker-compose.api.yml up -d --no-deps --force-recreate api
